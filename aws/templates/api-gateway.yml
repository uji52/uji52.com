AWSTemplateFormatVersion: '2010-09-09'
Description: 'API Gateway -> SNS'

Parameters:
  EmailSNSTopicArn:
    Type: String
    Description: 'SNS Topic ARN to send emails to'
  Environment:
    Type: String
    Description: 'dev or prd'
    AllowedValues:
      - dev
      - prd

Conditions:
  IsDev: !Equals [ !Ref Environment, 'dev' ]
  IsPrd: !Equals [ !Ref Environment, 'prd' ]

Resources:
  # IAM Role for API Gateway to access SNS
  ApiGatewayExecutionRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: apigateway.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: ApiGatewaySNSPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action: sns:Publish
                Resource: !Ref EmailSNSTopicArn
              - Effect: Allow
                Action:
                  - "logs:CreateLogGroup"
                  - "logs:CreateLogStream"
                  - "logs:DescribeLogGroups"
                  - "logs:DescribeLogStreams"
                  - "logs:PutLogEvents"
                  - "logs:GetLogEvents"
                  - "logs:FilterLogEvents"
                Resource: !Ref EmailSNSTopicArn

  # API Gateway
  APIGW:
    Type: 'AWS::ApiGateway::RestApi'
    Properties:
      Name: !Sub 'uji52com-API-${Environment}'
      Description: API for sending emails via SNS

  EmailResource:
    Type: 'AWS::ApiGateway::Resource'
    Properties:
      RestApiId: !Ref APIGW
      ParentId: !GetAtt APIGW.RootResourceId
      PathPart: 'email'

  EmailMethod:
    Type: 'AWS::ApiGateway::Method'
    Properties:
      RestApiId: !Ref APIGW
      ResourceId: !Ref EmailResource
      HttpMethod: POST
      AuthorizationType: NONE
      Integration:
        Type: AWS
        IntegrationHttpMethod: POST
        Uri: !Sub 'arn:aws:apigateway:${AWS::Region}:sns:action/Publish'
        Credentials: !GetAtt ApiGatewayExecutionRole.Arn
        RequestParameters:
          integration.request.querystring.Message: "method.request.body"
          integration.request.querystring.TopicArn: !Sub "'${EmailSNSTopicArn}'"
        IntegrationResponses:
          - StatusCode: "200"
            ResponseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Methods: "'DELETE,GET,HEAD,OPTIONS,PATCH,POST,PUT'"
              method.response.header.Access-Control-Allow-Origin: !If [ IsDev, "'https://dev.uji52.com'", "'https://www.uji52.com'" ]
      MethodResponses:
        - StatusCode: "200"
          ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: true
            method.response.header.Access-Control-Allow-Methods: true
            method.response.header.Access-Control-Allow-Origin: true
  EmailOptionsMethod:
    Type: 'AWS::ApiGateway::Method'
    Properties:
      RestApiId: !Ref APIGW
      ResourceId: !Ref EmailResource
      HttpMethod: OPTIONS
      AuthorizationType: NONE
      Integration:
        Type: MOCK
        RequestTemplates:
          application/json: '{ "statusCode": 200 }'
        IntegrationResponses:
          - StatusCode: "200"
            ResponseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Methods: "'DELETE,GET,HEAD,OPTIONS,PATCH,POST,PUT'"
              method.response.header.Access-Control-Allow-Origin: !If [ IsDev, "'https://dev.uji52.com'", "'https://www.uji52.com'" ]
      MethodResponses:
        - StatusCode: "200"
          ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: true
            method.response.header.Access-Control-Allow-Methods: true
            method.response.header.Access-Control-Allow-Origin: true

  # API Gateway Deployment
  ApiDeployment:
    Type: 'AWS::ApiGateway::Deployment'
    DependsOn: [EmailMethod, EmailOptionsMethod]
    Properties:
      RestApiId: !Ref APIGW

  ApiStage:
    Type: 'AWS::ApiGateway::Stage'
    Properties:
      DeploymentId: !Ref ApiDeployment
      RestApiId: !Ref APIGW
      StageName: !Ref Environment

Outputs:
  ApiEndpoint:
    Description: 'API Endpoint URL'
    Value: !Sub 'https://${APIGW}.execute-api.${AWS::Region}.amazonaws.com/prod/email'
